/*
 * service-tracking-events
 * marketing tracking compoent to receive marketing events
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ebay.app.raptor.chocolate.gen.model;

import java.util.Objects;
import java.util.Arrays;
import java.io.Serializable;
import io.swagger.annotations.*;

import com.ebay.app.raptor.chocolate.gen.model.EventParameters;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.*;

/**
 * Event
 */


@javax.annotation.Generated(value = "com.ebay.swagger.templates.codegen.JavaEtsGenerator", date = "2020-05-13T16:46:21.310+08:00[Asia/Shanghai]")
@JsonPropertyOrder({ "targetUrl","referrer","eventType","parameters" })
@JsonIgnoreProperties(ignoreUnknown = true)


public class Event implements Serializable {

  private static final long serialVersionUID = 1L;



  @JsonProperty("targetUrl")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private String targetUrl = null;
  @JsonProperty("referrer")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private String referrer = null;
  /**
   * Gets or Sets eventType
   */
  public enum EventTypeEnum {

    CLICK("click"),
    NOTIFICATION("notification");
    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String text) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("eventType")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private EventTypeEnum eventType = null;
  @JsonProperty("parameters")
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private List<EventParameters> parameters = null;

  /**
   * Get targetUrl
   * @return targetUrl
   **/
  @ApiModelProperty(example = "htttps://www.ebay.com/deals", value = "")
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }
  /**
   * Get referrer
   * @return referrer
   **/
  @ApiModelProperty(example = "htttps://www.google.com", value = "")
  public String getReferrer() {
    return referrer;
  }

  public void setReferrer(String referrer) {
    this.referrer = referrer;
  }
  /**
   * Get eventType
   * @return eventType
   **/
  @ApiModelProperty(value = "")
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }
  /**
   * Get parameters
   * @return parameters
   **/
  @ApiModelProperty(value = "")
  public List<EventParameters> getParameters() {
    return parameters;
  }

  public void setParameters(List<EventParameters> parameters) {
    this.parameters = parameters;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.targetUrl, event.targetUrl) &&
        Objects.equals(this.referrer, event.referrer) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.parameters, event.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetUrl, referrer, eventType, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");

    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
